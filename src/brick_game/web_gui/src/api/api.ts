/* tslint:disable */
/* eslint-disable */
/**
 * BrickGame
 * BrickGame 3.0 REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     * Сообщение об ошибке
     * @type {string}
     * @memberof ErrorMessage
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GameInfo
 */
export interface GameInfo {
    /**
     * Идентификатор игры
     * @type {number}
     * @memberof GameInfo
     */
    'id'?: number;
    /**
     * Название игры
     * @type {string}
     * @memberof GameInfo
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GameState
 */
export interface GameState {
    /**
     * Матрица, описывающая состояние игрового поля
     * @type {Array<Array<boolean>>}
     * @memberof GameState
     */
    'field'?: Array<Array<boolean>>;
    /**
     * Поле доп. информации
     * @type {Array<Array<boolean>>}
     * @memberof GameState
     */
    'next'?: Array<Array<boolean>>;
    /**
     * Текущее количество очков
     * @type {number}
     * @memberof GameState
     */
    'score'?: number;
    /**
     * Максимальное количество очков
     * @type {number}
     * @memberof GameState
     */
    'high_score'?: number;
    /**
     * Поле доп. информации
     * @type {number}
     * @memberof GameState
     */
    'level'?: number;
    /**
     * Поле доп. информации
     * @type {number}
     * @memberof GameState
     */
    'speed'?: number;
    /**
     * Поле доп. информации
     * @type {boolean}
     * @memberof GameState
     */
    'pause'?: boolean;
}
/**
 * 
 * @export
 * @interface GamesList
 */
export interface GamesList {
    /**
     * Список игр
     * @type {Array<GameInfo>}
     * @memberof GamesList
     */
    'games'?: Array<GameInfo>;
}
/**
 * 
 * @export
 * @interface UserAction
 */
export interface UserAction {
    /**
     * Идентификатор действия
     * @type {number}
     * @memberof UserAction
     */
    'action_id'?: number;
    /**
     * Флаг, отвечающий за зажатие кнопки
     * @type {boolean}
     * @memberof UserAction
     */
    'hold'?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Выполнить команду игрока
         * @param {UserAction} [userAction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actionsPost: async (userAction?: UserAction, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAction, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Выбор игры
         * @param {number} gameId Идентификатор игры, которая должна быть запущена
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGameIdPost: async (gameId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('gamesGameIdPost', 'gameId', gameId)
            const localVarPath = `/games/{gameId}`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение списка доступных игр
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение текущего состояния игры
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Выполнить команду игрока
         * @param {UserAction} [userAction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async actionsPost(userAction?: UserAction, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.actionsPost(userAction, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.actionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Выбор игры
         * @param {number} gameId Идентификатор игры, которая должна быть запущена
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesGameIdPost(gameId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesGameIdPost(gameId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.gamesGameIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получение списка доступных игр
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.gamesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получение текущего состояния игры
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stateGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stateGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.stateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Выполнить команду игрока
         * @param {UserAction} [userAction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actionsPost(userAction?: UserAction, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.actionsPost(userAction, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Выбор игры
         * @param {number} gameId Идентификатор игры, которая должна быть запущена
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGameIdPost(gameId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.gamesGameIdPost(gameId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение списка доступных игр
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGet(options?: RawAxiosRequestConfig): AxiosPromise<GamesList> {
            return localVarFp.gamesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение текущего состояния игры
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateGet(options?: RawAxiosRequestConfig): AxiosPromise<GameState> {
            return localVarFp.stateGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Выполнить команду игрока
     * @param {UserAction} [userAction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public actionsPost(userAction?: UserAction, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).actionsPost(userAction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Выбор игры
     * @param {number} gameId Идентификатор игры, которая должна быть запущена
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gamesGameIdPost(gameId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).gamesGameIdPost(gameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение списка доступных игр
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gamesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).gamesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение текущего состояния игры
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stateGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).stateGet(options).then((request) => request(this.axios, this.basePath));
    }
}



